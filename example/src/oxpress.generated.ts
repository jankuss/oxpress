import { Request, Response, NextFunction, IRouter } from "express";
import * as OpenApiValidator from "express-openapi-validator";
// BEGIN "openapi-typescript" SECTION
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v1/events/{id}": {
    get: {
      parameters: {
        path: {
          /** ID of the event to get the details from */
          id: string;
        };
      };
      responses: {
        /** The event details */
        200: {
          content: {
            "application/json": {
              campaigns?: {
                /** The redemption code */
                code?: string;
                /** A custom description for the campaign */
                description?: string;
                /** The campaign type */
                type?: string;
              }[];
            };
          };
        };
      };
    };
  };
  "/v1/events/{id}/favorite": {
    put: {
      parameters: {
        path: {
          /** ID of the event to favorite */
          id: string;
        };
      };
      responses: {
        /** A empty response */
        200: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** ID of the event to unfavorite */
          id: string;
        };
      };
      responses: {
        /** A empty response */
        200: unknown;
      };
    };
  };
  "/v1/clubs/{id}/favorite": {
    put: {
      parameters: {
        path: {
          /** ID of the club to favorite */
          id: string;
        };
      };
      responses: {
        /** A empty response */
        200: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** ID of the club to unfavorite */
          id: string;
        };
      };
      responses: {
        /** A empty response */
        200: unknown;
      };
    };
  };
  "/v1/events": {
    get: {
      parameters: {
        query: {
          /** The current latitude */
          lat: number;
          /** The current longitude */
          lng: number;
          /** The current radius */
          radius: number;
          /** The offset in the list */
          offset: number;
        };
      };
      responses: {
        /** A array of events */
        200: {
          content: {
            "application/json": {
              /** The event id */
              id?: string;
              /** Name of the event */
              name?: string;
              /** Description of the event */
              description?: string;
              /** The start time of the event */
              startTime?: string;
              /** The end time of the event */
              endTime?: string;
              /** Url of the image */
              image?: string;
              /** Latitute of the event */
              lat?: number;
              /** Longitude of the event */
              lng?: number;
              /** Distance from the event to the lat/lng position */
              distance?: number;
              /** Start Date */
              startDate?: string;
              favorite?: "favorite" | "unfavorite";
              club?: {
                /** The club id */
                id?: string;
                /** Name of the club */
                name?: string;
                /** Url to the club image */
                image?: string;
                /** The number of events for the club */
                eventCount?: number;
                /** Name of the city the club is in */
                cityName?: string;
                favorite?: "favorite" | "unfavorite";
              };
            }[];
          };
        };
      };
    };
  };
  "/v1/clubs": {
    get: {
      parameters: {
        query: {
          /** The current latitude */
          lat?: number;
          /** The current longitude */
          lng?: number;
          /** The current radius */
          radius?: number;
        };
      };
      responses: {
        /** A array of clubs */
        200: {
          content: {
            "application/json": {
              /** The club id */
              id?: string;
              /** Name of the club */
              name?: string;
              /** Url to the club image */
              image?: string;
              /** The number of events for the club */
              eventCount?: number;
              /** Name of the city the club is in */
              cityName?: string;
              favorite?: "favorite" | "unfavorite";
            }[];
          };
        };
      };
    };
  };
  "/v1/clubs/{id}": {
    get: {
      parameters: {
        path: {
          /** ID of the club to get the details from */
          id: string;
        };
      };
      responses: {
        /** The club details */
        200: {
          content: {
            "application/json": {
              /** Basic club information */
              club?: {
                /** The club id */
                id?: string;
                /** Name of the club */
                name?: string;
                /** Url to the club image */
                image?: string;
                /** The number of events for the club */
                eventCount?: number;
                /** Name of the city the club is in */
                cityName?: string;
                favorite?: "favorite" | "unfavorite";
              };
              events?: {
                /** The event id */
                id?: string;
                /** Name of the event */
                name?: string;
                /** Description of the event */
                description?: string;
                /** The start time of the event */
                startTime?: string;
                /** The end time of the event */
                endTime?: string;
                /** Url of the image */
                image?: string;
                /** Latitute of the event */
                lat?: number;
                /** Longitude of the event */
                lng?: number;
                /** Distance from the event to the lat/lng position */
                distance?: number;
                /** Start Date */
                startDate?: string;
                favorite?: "favorite" | "unfavorite";
                club?: {
                  /** The club id */
                  id?: string;
                  /** Name of the club */
                  name?: string;
                  /** Url to the club image */
                  image?: string;
                  /** The number of events for the club */
                  eventCount?: number;
                  /** Name of the city the club is in */
                  cityName?: string;
                  favorite?: "favorite" | "unfavorite";
                };
              }[];
              /** Description of the club */
              description?: string;
            };
          };
        };
      };
    };
  };
  "/v1/favoriteevents": {
    get: {
      responses: {
        /** The favorited events */
        200: {
          content: {
            "application/json": {
              favoriteEvents?: {
                /** The event id */
                id?: string;
                /** Name of the event */
                name?: string;
                /** Description of the event */
                description?: string;
                /** The start time of the event */
                startTime?: string;
                /** The end time of the event */
                endTime?: string;
                /** Url of the image */
                image?: string;
                /** Latitute of the event */
                lat?: number;
                /** Longitude of the event */
                lng?: number;
                /** Distance from the event to the lat/lng position */
                distance?: number;
                /** Start Date */
                startDate?: string;
                favorite?: "favorite" | "unfavorite";
                club?: {
                  /** The club id */
                  id?: string;
                  /** Name of the club */
                  name?: string;
                  /** Url to the club image */
                  image?: string;
                  /** The number of events for the club */
                  eventCount?: number;
                  /** Name of the city the club is in */
                  cityName?: string;
                  favorite?: "favorite" | "unfavorite";
                };
              }[];
              fromClubs?: {
                /** The event id */
                id?: string;
                /** Name of the event */
                name?: string;
                /** Description of the event */
                description?: string;
                /** The start time of the event */
                startTime?: string;
                /** The end time of the event */
                endTime?: string;
                /** Url of the image */
                image?: string;
                /** Latitute of the event */
                lat?: number;
                /** Longitude of the event */
                lng?: number;
                /** Distance from the event to the lat/lng position */
                distance?: number;
                /** Start Date */
                startDate?: string;
                favorite?: "favorite" | "unfavorite";
                club?: {
                  /** The club id */
                  id?: string;
                  /** Name of the club */
                  name?: string;
                  /** Url to the club image */
                  image?: string;
                  /** The number of events for the club */
                  eventCount?: number;
                  /** Name of the city the club is in */
                  cityName?: string;
                  favorite?: "favorite" | "unfavorite";
                };
              }[];
            };
          };
        };
      };
    };
  };
}

export interface components {
  schemas: {
    Favorites: {
      favoriteEvents?: {
        /** The event id */
        id?: string;
        /** Name of the event */
        name?: string;
        /** Description of the event */
        description?: string;
        /** The start time of the event */
        startTime?: string;
        /** The end time of the event */
        endTime?: string;
        /** Url of the image */
        image?: string;
        /** Latitute of the event */
        lat?: number;
        /** Longitude of the event */
        lng?: number;
        /** Distance from the event to the lat/lng position */
        distance?: number;
        /** Start Date */
        startDate?: string;
        favorite?: "favorite" | "unfavorite";
        club?: {
          /** The club id */
          id?: string;
          /** Name of the club */
          name?: string;
          /** Url to the club image */
          image?: string;
          /** The number of events for the club */
          eventCount?: number;
          /** Name of the city the club is in */
          cityName?: string;
          favorite?: "favorite" | "unfavorite";
        };
      }[];
      fromClubs?: {
        /** The event id */
        id?: string;
        /** Name of the event */
        name?: string;
        /** Description of the event */
        description?: string;
        /** The start time of the event */
        startTime?: string;
        /** The end time of the event */
        endTime?: string;
        /** Url of the image */
        image?: string;
        /** Latitute of the event */
        lat?: number;
        /** Longitude of the event */
        lng?: number;
        /** Distance from the event to the lat/lng position */
        distance?: number;
        /** Start Date */
        startDate?: string;
        favorite?: "favorite" | "unfavorite";
        club?: {
          /** The club id */
          id?: string;
          /** Name of the club */
          name?: string;
          /** Url to the club image */
          image?: string;
          /** The number of events for the club */
          eventCount?: number;
          /** Name of the city the club is in */
          cityName?: string;
          favorite?: "favorite" | "unfavorite";
        };
      }[];
    };
    EventDetails: {
      campaigns?: {
        /** The redemption code */
        code?: string;
        /** A custom description for the campaign */
        description?: string;
        /** The campaign type */
        type?: string;
      }[];
    };
    Redemption: {
      /** The redemption code */
      code?: string;
      /** A custom description for the campaign */
      description?: string;
      /** The campaign type */
      type?: string;
    };
    ClubDetails: {
      /** Basic club information */
      club?: {
        /** The club id */
        id?: string;
        /** Name of the club */
        name?: string;
        /** Url to the club image */
        image?: string;
        /** The number of events for the club */
        eventCount?: number;
        /** Name of the city the club is in */
        cityName?: string;
        favorite?: "favorite" | "unfavorite";
      };
      events?: {
        /** The event id */
        id?: string;
        /** Name of the event */
        name?: string;
        /** Description of the event */
        description?: string;
        /** The start time of the event */
        startTime?: string;
        /** The end time of the event */
        endTime?: string;
        /** Url of the image */
        image?: string;
        /** Latitute of the event */
        lat?: number;
        /** Longitude of the event */
        lng?: number;
        /** Distance from the event to the lat/lng position */
        distance?: number;
        /** Start Date */
        startDate?: string;
        favorite?: "favorite" | "unfavorite";
        club?: {
          /** The club id */
          id?: string;
          /** Name of the club */
          name?: string;
          /** Url to the club image */
          image?: string;
          /** The number of events for the club */
          eventCount?: number;
          /** Name of the city the club is in */
          cityName?: string;
          favorite?: "favorite" | "unfavorite";
        };
      }[];
      /** Description of the club */
      description?: string;
    };
    Event: {
      /** The event id */
      id?: string;
      /** Name of the event */
      name?: string;
      /** Description of the event */
      description?: string;
      /** The start time of the event */
      startTime?: string;
      /** The end time of the event */
      endTime?: string;
      /** Url of the image */
      image?: string;
      /** Latitute of the event */
      lat?: number;
      /** Longitude of the event */
      lng?: number;
      /** Distance from the event to the lat/lng position */
      distance?: number;
      /** Start Date */
      startDate?: string;
      favorite?: "favorite" | "unfavorite";
      club?: {
        /** The club id */
        id?: string;
        /** Name of the club */
        name?: string;
        /** Url to the club image */
        image?: string;
        /** The number of events for the club */
        eventCount?: number;
        /** Name of the city the club is in */
        cityName?: string;
        favorite?: "favorite" | "unfavorite";
      };
    };
    ClubForEvent: {
      /** The club id */
      id?: string;
      /** Name of the club */
      name?: string;
      /** Url to the club image */
      image?: string;
      /** The number of events for the club */
      eventCount?: number;
      /** Name of the city the club is in */
      cityName?: string;
      favorite?: "favorite" | "unfavorite";
    };
  };
}

export interface operations {}

export interface external {}

// END "openapi-typescript" SECTION

const inlineDocument: any = {
  openapi: "3.0.0",
  info: {
    title: "Groover API",
    description: "The general Groover API",
    version: "1.0.0",
  },
  paths: {
    "/v1/events/{id}": {
      get: {
        parameters: [
          {
            in: "path",
            name: "id",
            schema: { type: "string" },
            required: true,
            description: "ID of the event to get the details from",
          },
        ],
        summary: "Get the event details",
        responses: {
          "200": {
            description: "The event details",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    campaigns: {
                      type: "array",
                      items: {
                        properties: {
                          code: {
                            type: "string",
                            description: "The redemption code",
                          },
                          description: {
                            type: "string",
                            description:
                              "A custom description for the campaign",
                          },
                          type: {
                            type: "string",
                            description: "The campaign type",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    "/v1/events/{id}/favorite": {
      put: {
        parameters: [
          {
            in: "path",
            name: "id",
            schema: { type: "string" },
            required: true,
            description: "ID of the event to favorite",
          },
        ],
        responses: { "200": { description: "A empty response" } },
      },
      delete: {
        parameters: [
          {
            in: "path",
            name: "id",
            schema: { type: "string" },
            required: true,
            description: "ID of the event to unfavorite",
          },
        ],
        responses: { "200": { description: "A empty response" } },
      },
    },
    "/v1/clubs/{id}/favorite": {
      put: {
        parameters: [
          {
            in: "path",
            name: "id",
            schema: { type: "string" },
            required: true,
            description: "ID of the club to favorite",
          },
        ],
        responses: { "200": { description: "A empty response" } },
      },
      delete: {
        parameters: [
          {
            in: "path",
            name: "id",
            schema: { type: "string" },
            required: true,
            description: "ID of the club to unfavorite",
          },
        ],
        responses: { "200": { description: "A empty response" } },
      },
    },
    "/v1/events": {
      get: {
        parameters: [
          {
            in: "query",
            name: "lat",
            schema: { type: "number" },
            description: "The current latitude",
            required: true,
          },
          {
            in: "query",
            name: "lng",
            schema: { type: "number" },
            description: "The current longitude",
            required: true,
          },
          {
            in: "query",
            name: "radius",
            schema: { type: "number" },
            description: "The current radius",
            required: true,
          },
          {
            in: "query",
            name: "offset",
            schema: { type: "number" },
            description: "The offset in the list",
            required: true,
          },
        ],
        summary:
          "Events in the vicinity of the specified lat/lng and within the radius",
        responses: {
          "200": {
            description: "A array of events",
            content: {
              "application/json": {
                schema: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      id: {
                        type: "string",
                        description: "The event id",
                        example: "a9sDS32",
                      },
                      name: {
                        type: "string",
                        description: "Name of the event",
                        example: "Studienstag im Studio",
                      },
                      description: {
                        type: "string",
                        description: "Description of the event",
                        example: "Studienstag ist eine coole Party",
                      },
                      startTime: {
                        type: "string",
                        description: "The start time of the event",
                        example: "2011-10-05T14:48:00.000Z",
                        format: "date-time",
                      },
                      endTime: {
                        type: "string",
                        description: "The end time of the event",
                        example: "2011-10-05T14:48:00.000Z",
                        format: "date-time",
                      },
                      image: {
                        type: "string",
                        description: "Url of the image",
                        example: "https://images.grooverapp.de/event.png",
                      },
                      lat: {
                        type: "number",
                        description: "Latitute of the event",
                        example: 49.5,
                      },
                      lng: {
                        type: "number",
                        description: "Longitude of the event",
                        example: 9.9,
                      },
                      distance: {
                        type: "number",
                        description:
                          "Distance from the event to the lat/lng position",
                        example: 5.3,
                      },
                      startDate: {
                        type: "string",
                        description: "Start Date",
                        example: "2011-10-10",
                        format: "date",
                      },
                      favorite: {
                        type: "string",
                        enum: ["favorite", "unfavorite"],
                      },
                      club: {
                        type: "object",
                        properties: {
                          id: { type: "string", description: "The club id" },
                          name: {
                            type: "string",
                            description: "Name of the club",
                          },
                          image: {
                            type: "string",
                            description: "Url to the club image",
                          },
                          eventCount: {
                            type: "integer",
                            description: "The number of events for the club",
                          },
                          cityName: {
                            type: "string",
                            description: "Name of the city the club is in",
                          },
                          favorite: {
                            type: "string",
                            enum: ["favorite", "unfavorite"],
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    "/v1/clubs": {
      get: {
        parameters: [
          {
            in: "query",
            name: "lat",
            schema: { type: "number" },
            description: "The current latitude",
          },
          {
            in: "query",
            name: "lng",
            schema: { type: "number" },
            description: "The current longitude",
          },
          {
            in: "query",
            name: "radius",
            schema: { type: "number" },
            description: "The current radius",
          },
        ],
        summary:
          "Clubs in the vicinity of the specified lat/lng and within the radius",
        responses: {
          "200": {
            description: "A array of clubs",
            content: {
              "application/json": {
                schema: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      id: { type: "string", description: "The club id" },
                      name: { type: "string", description: "Name of the club" },
                      image: {
                        type: "string",
                        description: "Url to the club image",
                      },
                      eventCount: {
                        type: "integer",
                        description: "The number of events for the club",
                      },
                      cityName: {
                        type: "string",
                        description: "Name of the city the club is in",
                      },
                      favorite: {
                        type: "string",
                        enum: ["favorite", "unfavorite"],
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    "/v1/clubs/{id}": {
      get: {
        parameters: [
          {
            in: "path",
            name: "id",
            schema: { type: "string" },
            required: true,
            description: "ID of the club to get the details from",
          },
        ],
        summary: "Get the club details",
        responses: {
          "200": {
            description: "The club details",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    club: {
                      type: "object",
                      properties: {
                        id: { type: "string", description: "The club id" },
                        name: {
                          type: "string",
                          description: "Name of the club",
                        },
                        image: {
                          type: "string",
                          description: "Url to the club image",
                        },
                        eventCount: {
                          type: "integer",
                          description: "The number of events for the club",
                        },
                        cityName: {
                          type: "string",
                          description: "Name of the city the club is in",
                        },
                        favorite: {
                          type: "string",
                          enum: ["favorite", "unfavorite"],
                        },
                      },
                      description: "Basic club information",
                    },
                    events: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          id: {
                            type: "string",
                            description: "The event id",
                            example: "a9sDS32",
                          },
                          name: {
                            type: "string",
                            description: "Name of the event",
                            example: "Studienstag im Studio",
                          },
                          description: {
                            type: "string",
                            description: "Description of the event",
                            example: "Studienstag ist eine coole Party",
                          },
                          startTime: {
                            type: "string",
                            description: "The start time of the event",
                            example: "2011-10-05T14:48:00.000Z",
                            format: "date-time",
                          },
                          endTime: {
                            type: "string",
                            description: "The end time of the event",
                            example: "2011-10-05T14:48:00.000Z",
                            format: "date-time",
                          },
                          image: {
                            type: "string",
                            description: "Url of the image",
                            example: "https://images.grooverapp.de/event.png",
                          },
                          lat: {
                            type: "number",
                            description: "Latitute of the event",
                            example: 49.5,
                          },
                          lng: {
                            type: "number",
                            description: "Longitude of the event",
                            example: 9.9,
                          },
                          distance: {
                            type: "number",
                            description:
                              "Distance from the event to the lat/lng position",
                            example: 5.3,
                          },
                          startDate: {
                            type: "string",
                            description: "Start Date",
                            example: "2011-10-10",
                            format: "date",
                          },
                          favorite: {
                            type: "string",
                            enum: ["favorite", "unfavorite"],
                          },
                          club: {
                            type: "object",
                            properties: {
                              id: {
                                type: "string",
                                description: "The club id",
                              },
                              name: {
                                type: "string",
                                description: "Name of the club",
                              },
                              image: {
                                type: "string",
                                description: "Url to the club image",
                              },
                              eventCount: {
                                type: "integer",
                                description:
                                  "The number of events for the club",
                              },
                              cityName: {
                                type: "string",
                                description: "Name of the city the club is in",
                              },
                              favorite: {
                                type: "string",
                                enum: ["favorite", "unfavorite"],
                              },
                            },
                          },
                        },
                      },
                    },
                    description: {
                      type: "string",
                      description: "Description of the club",
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    "/v1/favoriteevents": {
      get: {
        summary: "Get the favorited events",
        responses: {
          "200": {
            description: "The favorited events",
            content: {
              "application/json": {
                schema: {
                  type: "object",
                  properties: {
                    favoriteEvents: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          id: {
                            type: "string",
                            description: "The event id",
                            example: "a9sDS32",
                          },
                          name: {
                            type: "string",
                            description: "Name of the event",
                            example: "Studienstag im Studio",
                          },
                          description: {
                            type: "string",
                            description: "Description of the event",
                            example: "Studienstag ist eine coole Party",
                          },
                          startTime: {
                            type: "string",
                            description: "The start time of the event",
                            example: "2011-10-05T14:48:00.000Z",
                            format: "date-time",
                          },
                          endTime: {
                            type: "string",
                            description: "The end time of the event",
                            example: "2011-10-05T14:48:00.000Z",
                            format: "date-time",
                          },
                          image: {
                            type: "string",
                            description: "Url of the image",
                            example: "https://images.grooverapp.de/event.png",
                          },
                          lat: {
                            type: "number",
                            description: "Latitute of the event",
                            example: 49.5,
                          },
                          lng: {
                            type: "number",
                            description: "Longitude of the event",
                            example: 9.9,
                          },
                          distance: {
                            type: "number",
                            description:
                              "Distance from the event to the lat/lng position",
                            example: 5.3,
                          },
                          startDate: {
                            type: "string",
                            description: "Start Date",
                            example: "2011-10-10",
                            format: "date",
                          },
                          favorite: {
                            type: "string",
                            enum: ["favorite", "unfavorite"],
                          },
                          club: {
                            type: "object",
                            properties: {
                              id: {
                                type: "string",
                                description: "The club id",
                              },
                              name: {
                                type: "string",
                                description: "Name of the club",
                              },
                              image: {
                                type: "string",
                                description: "Url to the club image",
                              },
                              eventCount: {
                                type: "integer",
                                description:
                                  "The number of events for the club",
                              },
                              cityName: {
                                type: "string",
                                description: "Name of the city the club is in",
                              },
                              favorite: {
                                type: "string",
                                enum: ["favorite", "unfavorite"],
                              },
                            },
                          },
                        },
                      },
                    },
                    fromClubs: {
                      type: "array",
                      items: {
                        type: "object",
                        properties: {
                          id: {
                            type: "string",
                            description: "The event id",
                            example: "a9sDS32",
                          },
                          name: {
                            type: "string",
                            description: "Name of the event",
                            example: "Studienstag im Studio",
                          },
                          description: {
                            type: "string",
                            description: "Description of the event",
                            example: "Studienstag ist eine coole Party",
                          },
                          startTime: {
                            type: "string",
                            description: "The start time of the event",
                            example: "2011-10-05T14:48:00.000Z",
                            format: "date-time",
                          },
                          endTime: {
                            type: "string",
                            description: "The end time of the event",
                            example: "2011-10-05T14:48:00.000Z",
                            format: "date-time",
                          },
                          image: {
                            type: "string",
                            description: "Url of the image",
                            example: "https://images.grooverapp.de/event.png",
                          },
                          lat: {
                            type: "number",
                            description: "Latitute of the event",
                            example: 49.5,
                          },
                          lng: {
                            type: "number",
                            description: "Longitude of the event",
                            example: 9.9,
                          },
                          distance: {
                            type: "number",
                            description:
                              "Distance from the event to the lat/lng position",
                            example: 5.3,
                          },
                          startDate: {
                            type: "string",
                            description: "Start Date",
                            example: "2011-10-10",
                            format: "date",
                          },
                          favorite: {
                            type: "string",
                            enum: ["favorite", "unfavorite"],
                          },
                          club: {
                            type: "object",
                            properties: {
                              id: {
                                type: "string",
                                description: "The club id",
                              },
                              name: {
                                type: "string",
                                description: "Name of the club",
                              },
                              image: {
                                type: "string",
                                description: "Url to the club image",
                              },
                              eventCount: {
                                type: "integer",
                                description:
                                  "The number of events for the club",
                              },
                              cityName: {
                                type: "string",
                                description: "Name of the city the club is in",
                              },
                              favorite: {
                                type: "string",
                                enum: ["favorite", "unfavorite"],
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
  components: {
    schemas: {
      Favorites: {
        type: "object",
        properties: {
          favoriteEvents: {
            type: "array",
            items: {
              type: "object",
              properties: {
                id: {
                  type: "string",
                  description: "The event id",
                  example: "a9sDS32",
                },
                name: {
                  type: "string",
                  description: "Name of the event",
                  example: "Studienstag im Studio",
                },
                description: {
                  type: "string",
                  description: "Description of the event",
                  example: "Studienstag ist eine coole Party",
                },
                startTime: {
                  type: "string",
                  description: "The start time of the event",
                  example: "2011-10-05T14:48:00.000Z",
                  format: "date-time",
                },
                endTime: {
                  type: "string",
                  description: "The end time of the event",
                  example: "2011-10-05T14:48:00.000Z",
                  format: "date-time",
                },
                image: {
                  type: "string",
                  description: "Url of the image",
                  example: "https://images.grooverapp.de/event.png",
                },
                lat: {
                  type: "number",
                  description: "Latitute of the event",
                  example: 49.5,
                },
                lng: {
                  type: "number",
                  description: "Longitude of the event",
                  example: 9.9,
                },
                distance: {
                  type: "number",
                  description:
                    "Distance from the event to the lat/lng position",
                  example: 5.3,
                },
                startDate: {
                  type: "string",
                  description: "Start Date",
                  example: "2011-10-10",
                  format: "date",
                },
                favorite: { type: "string", enum: ["favorite", "unfavorite"] },
                club: {
                  type: "object",
                  properties: {
                    id: { type: "string", description: "The club id" },
                    name: { type: "string", description: "Name of the club" },
                    image: {
                      type: "string",
                      description: "Url to the club image",
                    },
                    eventCount: {
                      type: "integer",
                      description: "The number of events for the club",
                    },
                    cityName: {
                      type: "string",
                      description: "Name of the city the club is in",
                    },
                    favorite: {
                      type: "string",
                      enum: ["favorite", "unfavorite"],
                    },
                  },
                },
              },
            },
          },
          fromClubs: {
            type: "array",
            items: {
              type: "object",
              properties: {
                id: {
                  type: "string",
                  description: "The event id",
                  example: "a9sDS32",
                },
                name: {
                  type: "string",
                  description: "Name of the event",
                  example: "Studienstag im Studio",
                },
                description: {
                  type: "string",
                  description: "Description of the event",
                  example: "Studienstag ist eine coole Party",
                },
                startTime: {
                  type: "string",
                  description: "The start time of the event",
                  example: "2011-10-05T14:48:00.000Z",
                  format: "date-time",
                },
                endTime: {
                  type: "string",
                  description: "The end time of the event",
                  example: "2011-10-05T14:48:00.000Z",
                  format: "date-time",
                },
                image: {
                  type: "string",
                  description: "Url of the image",
                  example: "https://images.grooverapp.de/event.png",
                },
                lat: {
                  type: "number",
                  description: "Latitute of the event",
                  example: 49.5,
                },
                lng: {
                  type: "number",
                  description: "Longitude of the event",
                  example: 9.9,
                },
                distance: {
                  type: "number",
                  description:
                    "Distance from the event to the lat/lng position",
                  example: 5.3,
                },
                startDate: {
                  type: "string",
                  description: "Start Date",
                  example: "2011-10-10",
                  format: "date",
                },
                favorite: { type: "string", enum: ["favorite", "unfavorite"] },
                club: {
                  type: "object",
                  properties: {
                    id: { type: "string", description: "The club id" },
                    name: { type: "string", description: "Name of the club" },
                    image: {
                      type: "string",
                      description: "Url to the club image",
                    },
                    eventCount: {
                      type: "integer",
                      description: "The number of events for the club",
                    },
                    cityName: {
                      type: "string",
                      description: "Name of the city the club is in",
                    },
                    favorite: {
                      type: "string",
                      enum: ["favorite", "unfavorite"],
                    },
                  },
                },
              },
            },
          },
        },
      },
      EventDetails: {
        type: "object",
        properties: {
          campaigns: {
            type: "array",
            items: {
              properties: {
                code: { type: "string", description: "The redemption code" },
                description: {
                  type: "string",
                  description: "A custom description for the campaign",
                },
                type: { type: "string", description: "The campaign type" },
              },
            },
          },
        },
      },
      Redemption: {
        properties: {
          code: { type: "string", description: "The redemption code" },
          description: {
            type: "string",
            description: "A custom description for the campaign",
          },
          type: { type: "string", description: "The campaign type" },
        },
      },
      ClubDetails: {
        type: "object",
        properties: {
          club: {
            type: "object",
            properties: {
              id: { type: "string", description: "The club id" },
              name: { type: "string", description: "Name of the club" },
              image: { type: "string", description: "Url to the club image" },
              eventCount: {
                type: "integer",
                description: "The number of events for the club",
              },
              cityName: {
                type: "string",
                description: "Name of the city the club is in",
              },
              favorite: { type: "string", enum: ["favorite", "unfavorite"] },
            },
            description: "Basic club information",
          },
          events: {
            type: "array",
            items: {
              type: "object",
              properties: {
                id: {
                  type: "string",
                  description: "The event id",
                  example: "a9sDS32",
                },
                name: {
                  type: "string",
                  description: "Name of the event",
                  example: "Studienstag im Studio",
                },
                description: {
                  type: "string",
                  description: "Description of the event",
                  example: "Studienstag ist eine coole Party",
                },
                startTime: {
                  type: "string",
                  description: "The start time of the event",
                  example: "2011-10-05T14:48:00.000Z",
                  format: "date-time",
                },
                endTime: {
                  type: "string",
                  description: "The end time of the event",
                  example: "2011-10-05T14:48:00.000Z",
                  format: "date-time",
                },
                image: {
                  type: "string",
                  description: "Url of the image",
                  example: "https://images.grooverapp.de/event.png",
                },
                lat: {
                  type: "number",
                  description: "Latitute of the event",
                  example: 49.5,
                },
                lng: {
                  type: "number",
                  description: "Longitude of the event",
                  example: 9.9,
                },
                distance: {
                  type: "number",
                  description:
                    "Distance from the event to the lat/lng position",
                  example: 5.3,
                },
                startDate: {
                  type: "string",
                  description: "Start Date",
                  example: "2011-10-10",
                  format: "date",
                },
                favorite: { type: "string", enum: ["favorite", "unfavorite"] },
                club: {
                  type: "object",
                  properties: {
                    id: { type: "string", description: "The club id" },
                    name: { type: "string", description: "Name of the club" },
                    image: {
                      type: "string",
                      description: "Url to the club image",
                    },
                    eventCount: {
                      type: "integer",
                      description: "The number of events for the club",
                    },
                    cityName: {
                      type: "string",
                      description: "Name of the city the club is in",
                    },
                    favorite: {
                      type: "string",
                      enum: ["favorite", "unfavorite"],
                    },
                  },
                },
              },
            },
          },
          description: {
            type: "string",
            description: "Description of the club",
          },
        },
      },
      Event: {
        type: "object",
        properties: {
          id: {
            type: "string",
            description: "The event id",
            example: "a9sDS32",
          },
          name: {
            type: "string",
            description: "Name of the event",
            example: "Studienstag im Studio",
          },
          description: {
            type: "string",
            description: "Description of the event",
            example: "Studienstag ist eine coole Party",
          },
          startTime: {
            type: "string",
            description: "The start time of the event",
            example: "2011-10-05T14:48:00.000Z",
            format: "date-time",
          },
          endTime: {
            type: "string",
            description: "The end time of the event",
            example: "2011-10-05T14:48:00.000Z",
            format: "date-time",
          },
          image: {
            type: "string",
            description: "Url of the image",
            example: "https://images.grooverapp.de/event.png",
          },
          lat: {
            type: "number",
            description: "Latitute of the event",
            example: 49.5,
          },
          lng: {
            type: "number",
            description: "Longitude of the event",
            example: 9.9,
          },
          distance: {
            type: "number",
            description: "Distance from the event to the lat/lng position",
            example: 5.3,
          },
          startDate: {
            type: "string",
            description: "Start Date",
            example: "2011-10-10",
            format: "date",
          },
          favorite: { type: "string", enum: ["favorite", "unfavorite"] },
          club: {
            type: "object",
            properties: {
              id: { type: "string", description: "The club id" },
              name: { type: "string", description: "Name of the club" },
              image: { type: "string", description: "Url to the club image" },
              eventCount: {
                type: "integer",
                description: "The number of events for the club",
              },
              cityName: {
                type: "string",
                description: "Name of the city the club is in",
              },
              favorite: { type: "string", enum: ["favorite", "unfavorite"] },
            },
          },
        },
      },
      ClubForEvent: {
        type: "object",
        properties: {
          id: { type: "string", description: "The club id" },
          name: { type: "string", description: "Name of the club" },
          image: { type: "string", description: "Url to the club image" },
          eventCount: {
            type: "integer",
            description: "The number of events for the club",
          },
          cityName: {
            type: "string",
            description: "Name of the city the club is in",
          },
          favorite: { type: "string", enum: ["favorite", "unfavorite"] },
        },
      },
    },
  },
};

// @ts-ignore
export interface TypedExpressRouter {
  /** Get the event details */
  get(path: "/v1/events/:id", handler: GetV1EventsIdRequestHandler): void;
  put(
    path: "/v1/events/:id/favorite",
    handler: PutV1EventsIdFavoriteRequestHandler
  ): void;
  delete(
    path: "/v1/events/:id/favorite",
    handler: DeleteV1EventsIdFavoriteRequestHandler
  ): void;
  put(
    path: "/v1/clubs/:id/favorite",
    handler: PutV1ClubsIdFavoriteRequestHandler
  ): void;
  delete(
    path: "/v1/clubs/:id/favorite",
    handler: DeleteV1ClubsIdFavoriteRequestHandler
  ): void;
  /** Events in the vicinity of the specified lat/lng and within the radius */
  get(path: "/v1/events", handler: GetV1EventsRequestHandler): void;
  /** Clubs in the vicinity of the specified lat/lng and within the radius */
  get(path: "/v1/clubs", handler: GetV1ClubsRequestHandler): void;
  /** Get the club details */
  get(path: "/v1/clubs/:id", handler: GetV1ClubsIdRequestHandler): void;
  /** Get the favorited events */
  get(
    path: "/v1/favoriteevents",
    handler: GetV1FavoriteeventsRequestHandler
  ): void;
}

export const validationMiddleware = OpenApiValidator.middleware({
  apiSpec: inlineDocument,
  validateResponses: true,
  validateRequests: true,
});

export function wrap<T extends IRouter>(app: T): TypedExpressRouter {
  app.use(validationMiddleware);
  return app as TypedExpressRouter;
}

export type GetV1EventsIdRequest = Request<
  GetV1EventsIdParams,
  any,
  GetV1EventsIdBody,
  GetV1EventsIdQuery,
  any
>;

export type GetV1EventsIdQuery = {};

export type GetV1EventsIdBody = {};

export type GetV1EventsIdParams =
  paths["/v1/events/{id}"]["get"]["parameters"]["path"];

export type GetV1EventsIdResponseBody200ApplicationJson =
  paths["/v1/events/{id}"]["get"]["responses"][200]["content"]["application/json"];

export interface GetV1EventsIdResponse extends Response {
  status(
    code: 200
  ): Omit<this, "json"> & {
    json: (
      body: GetV1EventsIdResponseBody200ApplicationJson
    ) => GetV1EventsIdResponse;
  };
  status(code: number): this;
}

export interface GetV1EventsIdResponse extends Response {
  status(
    code: 200
  ): Omit<this, "json"> & {
    json: (
      body: GetV1EventsIdResponseBody200ApplicationJson
    ) => GetV1EventsIdResponse;
  };
  status(code: number): this;
}

export interface GetV1EventsIdRequestHandler {
  (
    req: GetV1EventsIdRequest,
    res: GetV1EventsIdResponse,
    next: NextFunction
  ): void;
}

export type PutV1EventsIdFavoriteRequest = Request<
  PutV1EventsIdFavoriteParams,
  any,
  PutV1EventsIdFavoriteBody,
  PutV1EventsIdFavoriteQuery,
  any
>;

export type PutV1EventsIdFavoriteQuery = {};

export type PutV1EventsIdFavoriteBody = {};

export type PutV1EventsIdFavoriteParams =
  paths["/v1/events/{id}/favorite"]["put"]["parameters"]["path"];

export interface PutV1EventsIdFavoriteResponse extends Response {
  status(code: number): this;
}

export interface PutV1EventsIdFavoriteResponse extends Response {
  status(code: number): this;
}

export interface PutV1EventsIdFavoriteRequestHandler {
  (
    req: PutV1EventsIdFavoriteRequest,
    res: PutV1EventsIdFavoriteResponse,
    next: NextFunction
  ): void;
}

export type DeleteV1EventsIdFavoriteRequest = Request<
  DeleteV1EventsIdFavoriteParams,
  any,
  DeleteV1EventsIdFavoriteBody,
  DeleteV1EventsIdFavoriteQuery,
  any
>;

export type DeleteV1EventsIdFavoriteQuery = {};

export type DeleteV1EventsIdFavoriteBody = {};

export type DeleteV1EventsIdFavoriteParams =
  paths["/v1/events/{id}/favorite"]["delete"]["parameters"]["path"];

export interface DeleteV1EventsIdFavoriteResponse extends Response {
  status(code: number): this;
}

export interface DeleteV1EventsIdFavoriteResponse extends Response {
  status(code: number): this;
}

export interface DeleteV1EventsIdFavoriteRequestHandler {
  (
    req: DeleteV1EventsIdFavoriteRequest,
    res: DeleteV1EventsIdFavoriteResponse,
    next: NextFunction
  ): void;
}

export type PutV1ClubsIdFavoriteRequest = Request<
  PutV1ClubsIdFavoriteParams,
  any,
  PutV1ClubsIdFavoriteBody,
  PutV1ClubsIdFavoriteQuery,
  any
>;

export type PutV1ClubsIdFavoriteQuery = {};

export type PutV1ClubsIdFavoriteBody = {};

export type PutV1ClubsIdFavoriteParams =
  paths["/v1/clubs/{id}/favorite"]["put"]["parameters"]["path"];

export interface PutV1ClubsIdFavoriteResponse extends Response {
  status(code: number): this;
}

export interface PutV1ClubsIdFavoriteResponse extends Response {
  status(code: number): this;
}

export interface PutV1ClubsIdFavoriteRequestHandler {
  (
    req: PutV1ClubsIdFavoriteRequest,
    res: PutV1ClubsIdFavoriteResponse,
    next: NextFunction
  ): void;
}

export type DeleteV1ClubsIdFavoriteRequest = Request<
  DeleteV1ClubsIdFavoriteParams,
  any,
  DeleteV1ClubsIdFavoriteBody,
  DeleteV1ClubsIdFavoriteQuery,
  any
>;

export type DeleteV1ClubsIdFavoriteQuery = {};

export type DeleteV1ClubsIdFavoriteBody = {};

export type DeleteV1ClubsIdFavoriteParams =
  paths["/v1/clubs/{id}/favorite"]["delete"]["parameters"]["path"];

export interface DeleteV1ClubsIdFavoriteResponse extends Response {
  status(code: number): this;
}

export interface DeleteV1ClubsIdFavoriteResponse extends Response {
  status(code: number): this;
}

export interface DeleteV1ClubsIdFavoriteRequestHandler {
  (
    req: DeleteV1ClubsIdFavoriteRequest,
    res: DeleteV1ClubsIdFavoriteResponse,
    next: NextFunction
  ): void;
}

export type GetV1EventsRequest = Request<
  GetV1EventsParams,
  any,
  GetV1EventsBody,
  GetV1EventsQuery,
  any
>;

export type GetV1EventsQuery =
  paths["/v1/events"]["get"]["parameters"]["query"];

export type GetV1EventsBody = {};

export type GetV1EventsParams = {};

export type GetV1EventsResponseBody200ApplicationJson =
  paths["/v1/events"]["get"]["responses"][200]["content"]["application/json"];

export interface GetV1EventsResponse extends Response {
  status(
    code: 200
  ): Omit<this, "json"> & {
    json: (
      body: GetV1EventsResponseBody200ApplicationJson
    ) => GetV1EventsResponse;
  };
  status(code: number): this;
}

export interface GetV1EventsResponse extends Response {
  status(
    code: 200
  ): Omit<this, "json"> & {
    json: (
      body: GetV1EventsResponseBody200ApplicationJson
    ) => GetV1EventsResponse;
  };
  status(code: number): this;
}

export interface GetV1EventsRequestHandler {
  (req: GetV1EventsRequest, res: GetV1EventsResponse, next: NextFunction): void;
}

export type GetV1ClubsRequest = Request<
  GetV1ClubsParams,
  any,
  GetV1ClubsBody,
  GetV1ClubsQuery,
  any
>;

export type GetV1ClubsQuery = paths["/v1/clubs"]["get"]["parameters"]["query"];

export type GetV1ClubsBody = {};

export type GetV1ClubsParams = {};

export type GetV1ClubsResponseBody200ApplicationJson =
  paths["/v1/clubs"]["get"]["responses"][200]["content"]["application/json"];

export interface GetV1ClubsResponse extends Response {
  status(
    code: 200
  ): Omit<this, "json"> & {
    json: (
      body: GetV1ClubsResponseBody200ApplicationJson
    ) => GetV1ClubsResponse;
  };
  status(code: number): this;
}

export interface GetV1ClubsResponse extends Response {
  status(
    code: 200
  ): Omit<this, "json"> & {
    json: (
      body: GetV1ClubsResponseBody200ApplicationJson
    ) => GetV1ClubsResponse;
  };
  status(code: number): this;
}

export interface GetV1ClubsRequestHandler {
  (req: GetV1ClubsRequest, res: GetV1ClubsResponse, next: NextFunction): void;
}

export type GetV1ClubsIdRequest = Request<
  GetV1ClubsIdParams,
  any,
  GetV1ClubsIdBody,
  GetV1ClubsIdQuery,
  any
>;

export type GetV1ClubsIdQuery = {};

export type GetV1ClubsIdBody = {};

export type GetV1ClubsIdParams =
  paths["/v1/clubs/{id}"]["get"]["parameters"]["path"];

export type GetV1ClubsIdResponseBody200ApplicationJson =
  paths["/v1/clubs/{id}"]["get"]["responses"][200]["content"]["application/json"];

export interface GetV1ClubsIdResponse extends Response {
  status(
    code: 200
  ): Omit<this, "json"> & {
    json: (
      body: GetV1ClubsIdResponseBody200ApplicationJson
    ) => GetV1ClubsIdResponse;
  };
  status(code: number): this;
}

export interface GetV1ClubsIdResponse extends Response {
  status(
    code: 200
  ): Omit<this, "json"> & {
    json: (
      body: GetV1ClubsIdResponseBody200ApplicationJson
    ) => GetV1ClubsIdResponse;
  };
  status(code: number): this;
}

export interface GetV1ClubsIdRequestHandler {
  (
    req: GetV1ClubsIdRequest,
    res: GetV1ClubsIdResponse,
    next: NextFunction
  ): void;
}

export type GetV1FavoriteeventsRequest = Request<
  GetV1FavoriteeventsParams,
  any,
  GetV1FavoriteeventsBody,
  GetV1FavoriteeventsQuery,
  any
>;

export type GetV1FavoriteeventsQuery = {};

export type GetV1FavoriteeventsBody = {};

export type GetV1FavoriteeventsParams = {};

export type GetV1FavoriteeventsResponseBody200ApplicationJson =
  paths["/v1/favoriteevents"]["get"]["responses"][200]["content"]["application/json"];

export interface GetV1FavoriteeventsResponse extends Response {
  status(
    code: 200
  ): Omit<this, "json"> & {
    json: (
      body: GetV1FavoriteeventsResponseBody200ApplicationJson
    ) => GetV1FavoriteeventsResponse;
  };
  status(code: number): this;
}

export interface GetV1FavoriteeventsResponse extends Response {
  status(
    code: 200
  ): Omit<this, "json"> & {
    json: (
      body: GetV1FavoriteeventsResponseBody200ApplicationJson
    ) => GetV1FavoriteeventsResponse;
  };
  status(code: number): this;
}

export interface GetV1FavoriteeventsRequestHandler {
  (
    req: GetV1FavoriteeventsRequest,
    res: GetV1FavoriteeventsResponse,
    next: NextFunction
  ): void;
}
